--- setup.py	2013-05-12 11:32:54.000000000 +0800
+++ setup.py.static	2013-07-22 18:33:58.000000000 +0800
@@ -33,14 +33,17 @@
 COMPILED_WITH_PYDEBUG = ('--with-pydebug' in sysconfig.get_config_var("CONFIG_ARGS"))
 
 # This global variable is used to hold the list of modules to be disabled.
-disabled_module_list = []
+disabled_module_list = ["_ctypes", ]
+enabled_module_list = []
 
 def add_dir_to_list(dirlist, dir):
     """Add the directory 'dir' to the list 'dirlist' (at the front) if
     1) 'dir' is not already in 'dirlist'
     2) 'dir' actually exists, and is a directory."""
     if dir is not None and os.path.isdir(dir) and dir not in dirlist:
-        dirlist.insert(0, dir)
+        # hack: will not insert at the front, to prevent from including wrong headers
+        #dirlist.insert(0, dir)
+        dirlist.append(dir)
 
 def macosx_sdk_root():
     """
@@ -166,8 +169,13 @@
         missing = self.detect_modules()
 
         # Remove modules that are present on the disabled list
-        extensions = [ext for ext in self.extensions
-                      if ext.name not in disabled_module_list]
+        if 0 == len(enabled_module_list):
+            extensions = [ext for ext in self.extensions
+                        if ext.name not in disabled_module_list]
+        else:
+            extensions = [ext for ext in self.extensions
+                        if ext.name in enabled_module_list]
+
         # move ctypes to the end, it depends on other modules
         ext_map = dict((ext.name, i) for i, ext in enumerate(extensions))
         if "_ctypes" in ext_map:
@@ -245,10 +253,27 @@
         # compilers
         if compiler is not None:
             (ccshared,cflags) = sysconfig.get_config_vars('CCSHARED','CFLAGS')
-            args['compiler_so'] = compiler + ' ' + ccshared + ' ' + cflags
+            args['compiler'] = compiler + ' ' + ccshared + ' ' + cflags
+
         self.compiler.set_executables(**args)
 
-        build_ext.build_extensions(self)
+        objs = set()
+        for ext in self.extensions[:]:
+            o = self.compiler.compile(ext.sources, self.build_lib, ext.define_macros, ext.include_dirs)
+            # there are duplicated symbols, use set() to elimate them
+            objs.update(o)
+
+        # different lib requires different lib, such as OpenSSL, sqlite, etc.
+        # Normally, Python load module dynamically, but I want Python built 
+        # as stati lib, with static module, so I separate all module into 
+        # separate lib.
+        # On the other hand, some module all include math.o or timemodule.o, 
+        # so I must ensure each object is archived in to one .a 
+        
+        for o in objs:
+            self.compiler.create_static_lib([o], os.path.basename(o)[:-2], self.build_lib)
+ 
+        #build_ext.build_extensions(self)
 
         longest = max([len(e.name) for e in self.extensions])
         if self.failed:
